// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract MyToken {

    constructor() {
        owner=msg.sender;
    }

    //public variables
    string public name = "simple";
    string public symbol = "SIMP";
    uint public totalSupply = 0;
    address public owner;

    //emits Events
    event Mint(address indexed to, uint amount);
    event Burn(address indexed from, uint amount);

    // custom error
    error InsufficientBalance(uint balance, uint withdrawAmount);

    // mapping variable here
    mapping(address => uint) public balances;

    //Modifiers
    modifier onlyOwner 
    {
        //assert()
        assert(msg.sender==owner);
        _;
    }
    // mint function
    function mint (address _address, uint _value) public
    {
        //require()
        require(msg.sender==owner, "Not Authorised");
        totalSupply += _value;
        balances[_address] += _value;
        emit Mint(_address, _value);
    }

    // burn function
    function burn (address _address, uint _value) public onlyOwner {
        if(balances[_address] < _value) 
        {
            //revert()
            revert InsufficientBalance({balance: balances[_address], withdrawAmount: _value});
        }
        else{
            totalSupply -= _value;
            balances[_address] -= _value;
            emit Burn(_address, _value);
        }
    }

}
